definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.List:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      order:
        type: integer
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
      title:
        type: string
      updatedAt:
        type: string
    type: object
  models.SwaggerInputCreateList:
    properties:
      order:
        type: integer
      title:
        type: string
    type: object
  models.SwaggerInputCreateTask:
    properties:
      description:
        type: string
      list_id:
        type: integer
      title:
        type: string
    type: object
  models.SwaggerInputUpdateList:
    properties:
      order:
        type: integer
      title:
        type: string
    type: object
  models.SwaggerInputUpdateTask:
    properties:
      description:
        type: string
      list_id:
        type: integer
      order:
        type: integer
      title:
        type: string
    type: object
  models.SwaggerList:
    properties:
      list:
        $ref: '#/definitions/models.List'
    type: object
  models.SwaggerLists:
    properties:
      lists:
        items:
          $ref: '#/definitions/models.List'
        type: array
    type: object
  models.SwaggerTask:
    properties:
      task:
        $ref: '#/definitions/models.Task'
    type: object
  models.SwaggerTasks:
    properties:
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
    type: object
  models.Task:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      dueDate:
        type: string
      id:
        type: integer
      listID:
        type: integer
      order:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /list:
    post:
      consumes:
      - application/json
      description: Create a List with auto-set Order (set as last Order in database)
      parameters:
      - description: Title of this List
        in: body
        name: list
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerInputCreateList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerList'
      summary: Create a List
      tags:
      - List
  /list/:id:
    delete:
      consumes:
      - application/json
      description: Delete list with id. The orders of other lists will be updated.
      parameters:
      - description: ID of list to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerList'
      summary: Delete list by id
      tags:
      - List
    get:
      consumes:
      - application/json
      description: Get a list by id
      parameters:
      - description: ID of list to get
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerList'
      summary: Get List By ID
      tags:
      - List
    put:
      consumes:
      - application/json
      description: Update list with id. Fields [Title, Order] can be updated. Changing
        the order will affect other lists too, just like inserting in c++ vector.
      parameters:
      - description: ID of list to update
        in: path
        name: id
        required: true
        type: string
      - description: Details to update
        in: body
        name: list
        schema:
          $ref: '#/definitions/models.SwaggerInputUpdateList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerList'
      summary: Update list by id
      tags:
      - List
  /lists:
    get:
      consumes:
      - application/json
      description: Get All Lists in database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerLists'
      summary: Get All Lists in database
      tags:
      - List
  /task:
    post:
      consumes:
      - application/json
      description: Create a Task with auto-set Order (set as last Order in database)
        in a list specified by listID.
      parameters:
      - description: ID of the list this task is going to be placed in
        in: body
        name: listID
        required: true
        schema:
          type: string
      - description: Title of this Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerInputCreateTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerTask'
      summary: Create a Task
      tags:
      - Task
  /task/:id:
    delete:
      consumes:
      - application/json
      description: Delete task with id. The orders of other tasks will be updated.
      parameters:
      - description: ID of task to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerTask'
      summary: Delete task by id
      tags:
      - Task
    get:
      consumes:
      - application/json
      description: Get a task by id
      parameters:
      - description: ID of task to get
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerTask'
      summary: Get Task By ID
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: Update task with id. Fields [Title, Order, ListID] can be updated.
        Changing the order will affect other tasks too, just like inserting in c++
        vector. Changing list without specifying Order will put it in the last order.
      parameters:
      - description: ID of task to update
        in: path
        name: id
        required: true
        type: string
      - description: Details to update
        in: body
        name: task
        schema:
          $ref: '#/definitions/models.SwaggerInputUpdateTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerTask'
      summary: Update task by id
      tags:
      - Task
  /tasks:
    get:
      consumes:
      - application/json
      description: Get All Tasks in database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerTasks'
      summary: Get All Tasks in database
      tags:
      - Task
swagger: "2.0"
